{"version":3,"file":"element.min.js","sources":["../../../src/app/block/element.js"],"sourcesContent":["import Sortable from '../../lib/sortablejs';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string, get_strings} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\nexport default class BlockElement {\n    /**\n     * @type {BaseFactory}\n     */\n    #baseFactory;\n\n    /**\n     * @type {HTMLElement}\n     */\n    #element;\n\n    /**\n     * @type {CourseElement}\n     */\n    #course;\n\n    /**\n     * @type {QueueElement}\n     */\n    #queue;\n\n    /**\n     * @type {ItemElement[]}\n     */\n    #items = [];\n\n    /**\n     * @type {Sortable|NULL}\n     */\n    #sortable = null;\n\n    /**\n     * @type {ItemElement|NULL}\n     */\n    #clipboardItem = null;\n\n    /**\n     * @type {Boolean}\n     */\n    #canBackupUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #canAnonymizeUserdata = false;\n\n    /**\n     * @type {Boolean}\n     */\n    #showSharingCartBasket = false;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedCourseModuleId = null;\n\n    /**\n     * @type {Number|null}\n     */\n    #draggedSectionId = null;\n\n    /**\n     * @param {BaseFactory} baseFactory\n     * @param {HTMLElement} element\n     * @param {Boolean} canBackupUserdata\n     * @param {Boolean} canAnonymizeUserdata\n     * @param {Boolean} showSharingCartBasket\n     */\n    constructor(baseFactory, element, canBackupUserdata, canAnonymizeUserdata, showSharingCartBasket) {\n        this.#baseFactory = baseFactory;\n        this.#element = element;\n        this.#canBackupUserdata = canBackupUserdata;\n        this.#canAnonymizeUserdata = canAnonymizeUserdata;\n        this.#showSharingCartBasket = showSharingCartBasket;\n    }\n\n    /**\n     * @return {{course: CourseElement, block: BlockElement, queue: QueueElement}}\n     */\n    addEventListeners() {\n        this.setupCourse();\n        this.setupQueue();\n        this.setupItems();\n        this.setupDragAndDrop();\n        this.setupBulkDelete();\n\n        return {course: this.#course, queue: this.#queue, block: this};\n    }\n\n    setupCourse() {\n        const course = document.querySelector('.course-content');\n\n        this.#course = this.#baseFactory.block().course().element(this, course);\n    }\n\n    setupQueue() {\n        const queue = document.querySelector('.sharing_cart_queue');\n\n        this.#queue = this.#baseFactory.block().queue().element(this, queue);\n    }\n\n    setupItems() {\n        const items = this.#element.querySelectorAll('.sharing_cart_item');\n\n        items.forEach((element) => {\n            this.setupItem(element);\n        });\n\n        this.#sortable = new Sortable(this.#element.querySelector('.sharing_cart_items'), {\n            dataIdAttr: 'data-itemid',\n            onUpdate: () => {\n                Ajax.call([{\n                    methodname: 'block_sharing_cart_reorder_sharing_cart_items',\n                    args: {\n                        item_ids: this.#sortable.toArray(),\n                    },\n                    fail: (data) => {\n                        Notification.exception(data);\n                    }\n                }]);\n            }\n        });\n    }\n\n    setupDragAndDrop() {\n        const dropZone = this.#element;\n\n        dropZone.addEventListener('dragover', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('dragleave', (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n        dropZone.addEventListener('drop', async (e) => {\n            if (!this.#draggedSectionId && !this.#draggedCourseModuleId) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this.#draggedSectionId) {\n                await this.addSectionBackupToSharingCart(this.#draggedSectionId);\n            } else if (this.#draggedCourseModuleId) {\n                await this.addCourseModuleBackupToSharingCart(this.#draggedCourseModuleId);\n            }\n        });\n    }\n\n    setupBulkDelete() {\n        const enableBulkDeleteButton = this.#element.querySelector('#block_sharing_cart_bulk_delete');\n        const disableBulkDeleteButton = this.#element.querySelector('#block_sharing_cart_cancel_bulk_delete');\n        const bulkDeleteButton = this.#element.querySelector('#block_sharing_cart_bulk_delete_confirm');\n\n        const checkboxSelector = '.sharing_cart_item input[data-action=\"bulk_select\"][type=\"checkbox\"]';\n        const selectAllCheckbox = this.#element.querySelector('#select_all_box');\n        const selectAllLabel = this.#element.querySelector('#select_all_label');\n\n        const cancelBulkDeleteButton = this.#element.querySelector('#block_sharing_cart_cancel_bulk_delete');\n        const bulkDeleteTrigger = this.#element.querySelector('#block_sharing_cart_bulk_delete');\n\n        selectAllCheckbox.addEventListener('click', () => {\n            const itemCheckboxes = this.getItemCheckboxes();\n            const allSelected = Array.from(itemCheckboxes).every(checkbox => checkbox.checked);\n            itemCheckboxes.forEach(checkbox => {\n                checkbox.checked = !allSelected;\n            });\n            itemCheckboxes.forEach(checkbox => checkbox.addEventListener('change', () => {\n                this.updateSelectAllState();\n            }));\n        }\n        );\n        bulkDeleteTrigger.addEventListener('click', () => {\n            selectAllCheckbox.classList.remove('d-none');\n            selectAllLabel.classList.remove('d-none');\n            cancelBulkDeleteButton.classList.remove('d-none');\n            bulkDeleteTrigger.classList.add('d-none');\n        });\n        cancelBulkDeleteButton.addEventListener('click', () => {\n            selectAllCheckbox.classList.add('d-none');\n            selectAllLabel.classList.add('d-none');\n            cancelBulkDeleteButton.classList.add('d-none');\n            bulkDeleteTrigger.classList.remove('d-none');\n            this.getItemCheckboxes().forEach(checkbox => {\n                checkbox.checked = false;\n            });\n        });\n\n        enableBulkDeleteButton.addEventListener('click', () => {\n            enableBulkDeleteButton.classList.add('d-none');\n            disableBulkDeleteButton.classList.remove('d-none');\n            bulkDeleteButton.classList.remove('d-none');\n\n            this.#element.querySelectorAll(checkboxSelector).forEach((checkbox) => {\n                checkbox.classList.remove('d-none');\n                checkbox.checked = false;\n            });\n        });\n\n        disableBulkDeleteButton.addEventListener('click', () => {\n            disableBulkDeleteButton.classList.add('d-none');\n            bulkDeleteButton.classList.add('d-none');\n            bulkDeleteButton.disabled = true;\n            enableBulkDeleteButton.classList.remove('d-none');\n\n            this.#element.querySelectorAll(checkboxSelector).forEach((checkbox) => {\n                checkbox.classList.add('d-none');\n                checkbox.checked = false;\n            });\n        });\n\n        bulkDeleteButton.addEventListener('click', async () => {\n            if (bulkDeleteButton.disabled) {\n                return;\n            }\n\n            const itemIds = [];\n            this.#element.querySelectorAll(checkboxSelector + ':checked').forEach((checkbox) => {\n                itemIds.push(checkbox.value);\n            });\n\n            await this.confirmDeleteItems(itemIds);\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element\n     */\n    setupItem(element) {\n        const itemElement = this.#baseFactory.block().item().element(this, element);\n\n        this.#element.querySelector('.no-items')?.remove();\n\n        this.#items.push(itemElement);\n\n        this.getItemCheckboxes().forEach(checkbox => checkbox.addEventListener('change', () => {\n            this.updateBulkDeleteButtonState();\n            this.updateSelectAllState();\n        }));\n\n        this.updateBulkDeleteButtonState();\n        this.updateSelectAllState();\n    }\n    getItemCheckboxes() {\n        const checkboxSelector = '.sharing_cart_item input[data-action=\"bulk_select\"][type=\"checkbox\"]';\n        return this.#element.querySelectorAll(checkboxSelector);\n    }\n\n    updateBulkDeleteButtonState() {\n        const bulkDeleteButton = this.#element.querySelector('#block_sharing_cart_bulk_delete_confirm');\n        bulkDeleteButton.disabled = !Array.from(this.getItemCheckboxes()).some(checkbox => checkbox.checked);\n    }\n\n    async updateSelectAllState() {\n        const selectAllContainer = this.#element.querySelector('#select_all_container');\n        selectAllContainer.classList.toggle('d-none', this.#items.length === 0);\n\n        const selectAllCheckbox = this.#element.querySelector('#select_all_box');\n        const selectAllLabel = this.#element.querySelector('#select_all_label');\n\n        const itemCheckboxes = this.getItemCheckboxes();\n        const allSelected = Array.from(itemCheckboxes).every(checkbox => checkbox.checked);\n        const someSelected = Array.from(itemCheckboxes).some(checkbox => checkbox.checked);\n        selectAllCheckbox.checked = allSelected;\n        selectAllCheckbox.indeterminate = !allSelected && someSelected;\n        selectAllLabel.textContent = allSelected ?\n            await get_string('deselect_all', 'block_sharing_cart') :\n            await get_string('select_all', 'block_sharing_cart');\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async setClipboard(item) {\n        this.#clipboardItem = item;\n\n        await this.#course.setClipboard(item);\n    }\n\n    clearClipboard() {\n        this.#clipboardItem = null;\n    }\n\n    /**\n     * @param {Number|null} id\n     */\n    setDraggedSectionId(id) {\n        this.#draggedSectionId = id;\n    }\n\n    /**\n     * @param {Number|null} id\n     */\n    setDraggedCourseModuleId(id) {\n        this.#draggedCourseModuleId = id;\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    async removeItemElement(item) {\n        const childItems = item.getItemChildrenRecursively();\n        childItems.forEach((childItem) => {\n            const index = this.#items.findIndex((i) => i.getItemId() === Number.parseInt(childItem.dataset.itemid));\n            if (index === -1) {\n                return;\n            }\n\n            if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n                this.#course.clearClipboard();\n            }\n\n            this.#items.splice(index, 1);\n            childItem.remove();\n        });\n\n        const index = this.#items.findIndex((i) => i.getItemId() === item.getItemId());\n        if (this.#items[index].getItemId() === this.#clipboardItem?.getItemId()) {\n            this.#course.clearClipboard();\n        }\n\n        this.#items.splice(index, 1);\n        item.remove();\n\n        if (this.#items.length === 0) {\n            this.#element.querySelector('.sharing_cart_items')\n                .innerHTML = await get_string('no_items', 'block_sharing_cart');\n        }\n    }\n\n    /**\n     * @param {ItemElement} item\n     */\n    deleteItem(item) {\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_item_from_sharing_cart',\n            args: {\n                item_id: item.getItemId(),\n            },\n            done: async (deleted) => {\n                if (deleted) {\n                    await this.removeItemElement(item);\n                } else {\n                    await Notification.alert('Failed to delete item');\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {Array<Number>} itemIds\n     */\n    deleteItems(itemIds) {\n        itemIds = itemIds.map((id) => Number.parseInt(id));\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_delete_items_from_sharing_cart',\n            args: {\n                item_ids: itemIds,\n            },\n            done: async (deletedItemIds) => {\n                const items = this.#items.filter((i) => itemIds.includes(i.getItemId()));\n                for (const item of items) {\n                    const deleted = deletedItemIds.includes(item.getItemId());\n                    if (!deleted) {\n                        Notification.alert('Failed to delete item: \"' + item.getItemName() + '\"');\n                        continue;\n                    }\n\n                    await this.removeItemElement(item);\n                }\n                this.updateSelectAllState();\n\n                document.getElementById('block_sharing_cart_bulk_delete_confirm').disabled = true;\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    getElement() {\n        return this.#element;\n    }\n\n    /**\n     * @param {String} itemName\n     * @param {CallableFunction} onSave\n     * @return {Promise<Modal>}\n     */\n    async createBackupItemToSharingCartModal(itemName, onSave) {\n        const strings = await get_strings([\n            {\n                key: 'backup_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_sharing_cart',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'backup',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderTemplate(\n            'block_sharing_cart/modal/backup_to_sharing_cart_modal_body',\n            {\n                show_user_data_backup: this.#canBackupUserdata,\n                show_anonymize_user_data: this.#canBackupUserdata && this.#canAnonymizeUserdata,\n            }\n        );\n\n        /**\n         * @type {Modal}\n         */\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': \"' + itemName.slice(0, 50).trim() + '\" ' + strings[1],\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, () => {\n            const modalUserdataCheckbox = document.getElementById('modal-userdata-checkbox');\n            const modalAnonymizeCheckbox = document.getElementById('modal-anonymize-checkbox');\n\n            onSave({\n                users: modalUserdataCheckbox?.checked ?? false,\n                anonymize: modalAnonymizeCheckbox?.checked ?? false\n            });\n        });\n\n        return modal;\n    }\n\n    /**\n     * @param {Number} sectionId\n     */\n    async addSectionBackupToSharingCart(sectionId) {\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const cms = this.#course.getSectionCourseModules(sectionId);\n\n        if (cms.length === 0) {\n            const strings = await get_strings([\n                {\n                    key: 'no_course_modules_in_section',\n                    component: 'block_sharing_cart',\n                },\n                {\n                    key: 'no_course_modules_in_section_description',\n                    component: 'block_sharing_cart',\n                },\n            ]);\n\n            await Notification.alert(strings[0], strings[1]);\n\n            return;\n        }\n\n        const modal = await this.createBackupItemToSharingCartModal(sectionName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_section_into_sharing_cart',\n                args: {\n                    section_id: sectionId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n\n        await modal.show();\n    }\n\n    /**\n     * @param {Number} courseModuleId\n     */\n    async addCourseModuleBackupToSharingCart(courseModuleId) {\n        const courseModuleName = this.#course.getCourseModuleName(courseModuleId);\n\n        const modal = await this.createBackupItemToSharingCartModal(courseModuleName, (settings) => {\n            Ajax.call([{\n                methodname: 'block_sharing_cart_backup_course_module_into_sharing_cart',\n                args: {\n                    course_module_id: courseModuleId,\n                    settings: settings\n                },\n                done: async (data) => {\n                    await this.renderItem(data);\n                },\n                fail: (data) => {\n                    Notification.exception(data);\n                }\n            }]);\n        });\n        await modal.show();\n    }\n\n    /**\n     * @param {Object} item\n     */\n    async renderItem(item) {\n        const existingItemIndex = this.#items.findIndex((i) => i.getItemId() === item.id);\n        const existingItem = this.#items[existingItemIndex] ?? false;\n        const getOldElement = () => {\n            return this.#element.querySelector('.sharing_cart_items .sharing_cart_item[data-itemid=\"' + item.id + '\"]');\n        };\n        const oldElement = getOldElement();\n        if (existingItem && oldElement) {\n            const element = await this.#baseFactory.moodle().template().createElementFromFragment(\n                'block_sharing_cart',\n                'item',\n                1,\n                {\n                    item_id: item.id,\n                }\n            );\n\n            // Early exit if the element has been removed from the DOM in between rendering and checking earlier.\n            if (getOldElement() !== oldElement) {\n                return;\n            }\n\n            this.#element.querySelector('.sharing_cart_items').replaceChild(element, oldElement);\n            this.#items[existingItemIndex] = this.#baseFactory.block().item().element(this, element);\n\n            element.querySelectorAll('.sharing_cart_item').forEach((subItem) => {\n                this.setupItem(subItem);\n            });\n\n            return;\n        }\n\n        const element = await this.#baseFactory.moodle().template().createElementFromTemplate(\n            'block_sharing_cart/block/item',\n            {\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                status: 0,\n                old_instance_id: item.old_instance_id,\n                status_awaiting: true,\n                has_run_now: true,\n                task_id: item.task_id ?? null,\n                status_finished: false,\n                status_failed: false,\n                is_module: item.type !== 'section',\n                is_section: item.type === 'section',\n                is_root: true,\n            }\n        );\n        this.#element.querySelector('.sharing_cart_items').prepend(element);\n\n        this.setupItem(element);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {HTMLElement} modal\n     */\n    importItem(item, sectionId, modal) {\n        this.#course.clearClipboard();\n\n        const courseModuleIds = [];\n        modal.querySelectorAll('input[type=\"checkbox\"][data-type=\"coursemodule\"]:checked').forEach((checkbox) => {\n            courseModuleIds.push(checkbox.dataset.id);\n        });\n\n        if (item.isSection() && courseModuleIds.length === 0) {\n            modal.querySelectorAll('.form-check-input').forEach(async (item) => {\n                item.setCustomValidity(\n                    await get_string('atleast_one_course_module_must_be_included', 'block_sharing_cart')\n                );\n                item.reportValidity();\n            });\n            return false;\n        }\n\n        if (item.isModule()) {\n            courseModuleIds.push(item.getItemOldInstanceId());\n        }\n\n        Ajax.call([{\n            methodname: 'block_sharing_cart_restore_item_from_sharing_cart_into_section',\n            args: {\n                item_id: item.getItemId(),\n                section_id: sectionId,\n                course_modules_to_include: courseModuleIds,\n            },\n            done: async (success) => {\n                if (success) {\n                    await this.#queue.loadQueue(true);\n                }\n            },\n            fail: (data) => {\n                Notification.exception(data);\n            }\n        }]);\n    }\n\n    /**\n     * @param {ItemElement} item\n     * @param {Number} sectionId\n     * @param {Event} e\n     */\n    async confirmImportBackupFromSharingCart(item, sectionId, e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const strings = await get_strings([\n            {\n                key: 'copy_item',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'into_section',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'import',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const sectionName = this.#course.getSectionName(sectionId);\n\n        const {html, js} = await this.#baseFactory.moodle().template().renderFragment(\n            'block_sharing_cart',\n            'item_restore_form',\n            1,\n            {\n                item_id: item.getItemId()\n            }\n        );\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: strings[0] + ': ' +\n                '\"' + item.getItemName().slice(0, 50).trim() + '\"' +\n                ' ' + strings[1] + ': ' +\n                '\"' + sectionName.slice(0, 50).trim() + '\"',\n            body: html,\n            buttons: {\n                save: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n        modal.getRoot().on(ModalEvents.shown, () => this.#baseFactory.moodle().template().runTemplateJS(js));\n        modal.getRoot().on(ModalEvents.save, this.importItem.bind(this, item, sectionId, modal.getRoot()[0]));\n        await modal.show();\n    }\n\n    /**\n     * @param {Array<Number>} itemIds\n     */\n    async confirmDeleteItems(itemIds) {\n        const strings = await get_strings([\n            {\n                key: 'delete_items',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'confirm_delete_items',\n                component: 'block_sharing_cart',\n            },\n            {\n                key: 'delete',\n                component: 'core',\n            },\n            {\n                key: 'cancel',\n                component: 'core',\n            }\n        ]);\n\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.DELETE_CANCEL,\n            title: strings[0],\n            body: strings[1],\n            buttons: {\n                delete: strings[2],\n                cancel: strings[3],\n            },\n            removeOnClose: true,\n        });\n\n        modal.getRoot().on(ModalEvents.delete, this.deleteItems.bind(this, itemIds));\n        await modal.show();\n    }\n}"],"names":["constructor","baseFactory","element","canBackupUserdata","canAnonymizeUserdata","showSharingCartBasket","addEventListeners","setupCourse","setupQueue","setupItems","setupDragAndDrop","setupBulkDelete","course","this","queue","block","document","querySelector","_classPrivateFieldGet","querySelectorAll","forEach","setupItem","Sortable","dataIdAttr","onUpdate","call","methodname","args","item_ids","toArray","fail","data","exception","dropZone","addEventListener","e","preventDefault","stopPropagation","async","addSectionBackupToSharingCart","addCourseModuleBackupToSharingCart","enableBulkDeleteButton","disableBulkDeleteButton","bulkDeleteButton","checkboxSelector","selectAllCheckbox","selectAllLabel","cancelBulkDeleteButton","bulkDeleteTrigger","itemCheckboxes","getItemCheckboxes","allSelected","Array","from","every","checkbox","checked","updateSelectAllState","classList","remove","add","disabled","itemIds","push","value","confirmDeleteItems","itemElement","item","updateBulkDeleteButtonState","some","toggle","length","someSelected","indeterminate","textContent","setClipboard","clearClipboard","setDraggedSectionId","id","setDraggedCourseModuleId","getItemChildrenRecursively","childItem","index","findIndex","i","getItemId","Number","parseInt","dataset","itemid","_classPrivateFieldGet3","splice","_classPrivateFieldGet4","innerHTML","deleteItem","item_id","done","deleted","removeItemElement","Notification","alert","deleteItems","map","items","filter","includes","deletedItemIds","getItemName","getElementById","getElement","itemName","onSave","strings","key","component","html","js","moodle","template","renderTemplate","show_user_data_backup","show_anonymize_user_data","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","slice","trim","body","buttons","save","cancel","removeOnClose","getRoot","on","ModalEvents","shown","runTemplateJS","modalUserdataCheckbox","modalAnonymizeCheckbox","users","anonymize","sectionId","sectionName","getSectionName","getSectionCourseModules","createBackupItemToSharingCartModal","settings","section_id","renderItem","show","courseModuleId","courseModuleName","getCourseModuleName","course_module_id","existingItemIndex","existingItem","getOldElement","oldElement","createElementFromFragment","replaceChild","subItem","createElementFromTemplate","name","status","old_instance_id","status_awaiting","has_run_now","task_id","status_finished","status_failed","is_module","is_section","is_root","prepend","importItem","courseModuleIds","isSection","setCustomValidity","reportValidity","isModule","getItemOldInstanceId","course_modules_to_include","success","loadQueue","renderFragment","bind","DELETE_CANCEL","delete"],"mappings":"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"}